# TODO:
#   - prepare pcre_h.jl
#   - copy/link files into CMAKE_BINARY_DIR
#   - create sysimage

# $(BUILDDIR)/errno_h.jl:
# 	@$(call PRINT_PERL, echo '#include <errno.h>' | $(CPP) -dM - | perl -nle 'print "const $$1 = Int32($$2)" if /^#define\s+(E\w+)\s+(\d+)\s*$$/' | LC_ALL=C sort > $@)

# $(BUILDDIR)/file_constants.jl: $(SRCDIR)/../src/file_constants.h
# 	@$(call PRINT_PERL, $(CPP_STDOUT) -DJULIA $< | perl -nle 'print "$$1 0o$$2" if /^(\s*const\s+[A-z_]+\s+=)\s+(0[0-9]*)\s*$$/; print "$$1" if /^\s*(const\s+[A-z_]+\s+=\s+([1-9]|0x)[0-9A-z]*)\s*$$/' > $@)

# $(BUILDDIR)/uv_constants.jl: $(SRCDIR)/../src/uv_constants.h $(LIBUV_INC)/uv/errno.h
# 	@$(call PRINT_PERL, $(CPP_STDOUT) "-I$(LIBUV_INC)" -DJULIA $< | tail -n 16 > $@)

# $(BUILDDIR)/build_h.jl.phony:

find_package(PERL REQUIRED)
find_file(PCRE2_HEADER_FILE NAMES pcre2.h PATHS include)

set(JL_DIR_SEP "/")
if(WIN32)
#    set(JL_DIR_SEP "\\\\")
endif()
#JULIAHOME
# JULIA_DEPOT_PATH is share/julia
set(JL_BASE_DIR "${JULIA_DEPOT_PATH}/base")
set(JL_TMP_DIR "${JULIA_DEPOT_PATH}/tmp")
file(MAKE_DIRECTORY "${JL_TMP_DIR}")
file(COPY "${CMAKE_CURRENT_SOURCE_DIR}/." DESTINATION  "${JL_BASE_DIR}/")

if(NOT Darwin)
    set(JL_DARWIN_FRAMEWORK false)
endif()
set(JL_USE_GPL_LIBS true)
set(JL_USE_BLAS64 true)
set(JL_LIBM "")
set(LLVM_SHARED_LIB_NAME "LLVM-C")
configure_file("${JL_BASE_DIR}/build_h.jl.in" "${JL_BASE_DIR}/build_h.jl" @ONLY)
configure_file("${JL_BASE_DIR}/version_git.jl.in" "${JL_BASE_DIR}/version_git.jl" @ONLY) # TODO

separate_arguments(cpp_flags NATIVE_COMMAND "${CMAKE_C_FLAGS}")
separate_arguments(cpp_flags_${build_type} NATIVE_COMMAND "${CMAKE_C_FLAGS_${build_type}}")

set(CALL_C_PREPROCESSOR "${CMAKE_C_COMPILER}" -EP -d1PP)
add_custom_target(
    pcre_h ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "-I$<JOIN:$<TARGET_PROPERTY:julia,INCLUDE_DIRECTORIES>,;-I>"
        "-DPCRE2_CODE_UNIT_WIDTH=8"
        "${PCRE2_HEADER_FILE}"
        > "${JL_TMP_DIR}/pcre_h.jl.tmp"
    COMMAND "${CMAKE_COMMAND}"
        "-DINPUT=${JL_TMP_DIR}/pcre_h.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/pcre_h.jl"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/pcre_h_jl.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM #USES_TERMINAL
    BYPRODUCTS "${JL_BASE_DIR}/pcre_h.jl"
    DEPENDS "${PCRE2_HEADER_FILE}"
    )
add_custom_target(
    uv_constants ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "-I$<JOIN:$<TARGET_PROPERTY:julia,INCLUDE_DIRECTORIES>,;-I>"
        "-I$<JOIN:$<TARGET_PROPERTY:jl::libuv,INTERFACE_INCLUDE_DIRECTORIES>,;-I>"
        "-DJULIA"
        "${CMAKE_CURRENT_SOURCE_DIR}/../src/uv_constants.h"
        #"${LIBUV_INCLUDE_DIR}/uv/errno.h"
        > "${JL_TMP_DIR}/uv_constants.jl.tmp"
    COMMAND "${CMAKE_COMMAND}"
        "-DINPUT=${JL_TMP_DIR}/uv_constants.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/uv_constants.jl"
        "-DLINES=16"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/tail.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM #USES_TERMINAL
    BYPRODUCTS "${JL_BASE_DIR}/uv_constants.jl"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/../src/uv_constants.h"
    )

file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/errno-jl.h" "#include <errno.h>")
add_custom_target(
    errno ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "${CMAKE_CURRENT_BINARY_DIR}/errno-jl.h"
        > "${JL_TMP_DIR}/errno_h.jl.tmp"
    COMMAND ${CMAKE_COMMAND} 
        "-DINPUT=${JL_TMP_DIR}/errno_h.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/errno_h.jl"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/errno_h_jl.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM #USES_TERMINAL
    BYPRODUCTS "${JL_BASE_DIR}/errno_h.jl"
    )

add_custom_target(
    file_constants ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "-DJULIA"
        "${CMAKE_CURRENT_SOURCE_DIR}/../src/file_constants.h"
        > "${JL_TMP_DIR}/file_constants.jl.tmp"
    COMMAND ${CMAKE_COMMAND} 
        "-DINPUT=${JL_TMP_DIR}/file_constants.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/file_constants.jl"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/file_constants_jl.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM #USES_TERMINAL
    BYPRODUCTS "${JL_BASE_DIR}/file_constants.jl"
    )

set(JL_ARCHS X86 AArch32 AArch64)
set(final_contents "# This file is autogenerated by CMake")
foreach(arch IN LISTS JL_ARCHS)
    string(TOLOWER "${arch}" archl)
    set(feat_file "${CMAKE_CURRENT_SOURCE_DIR}/../src/features_${archl}.h")
    set(contents "")
    file(STRINGS "${feat_file}" contents REGEX "^JL_FEATURE_DEF") # also filters commented sections
    list(TRANSFORM contents 
         REPLACE 
            "^JL_FEATURE_DEF(_NAME)?\\\(([^,]+),[ \t]*([^,]+),.+" 
            "const JL_${arch}_\\2 = UInt32(\\3)"
        )
    list(JOIN contents "\n" contents_new)
    string(APPEND final_contents "\n# ${arch} features\n" "${contents_new}\n" )
endforeach()
file(WRITE "${JL_BASE_DIR}/features_h.jl" "${final_contents}\n")


install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/" DESTINATION "share/julia/base")
install(FILES 
            "${JL_BASE_DIR}/pcre_h.jl"
            "${JL_BASE_DIR}/uv_constants.jl"
            "${JL_BASE_DIR}/errno_h.jl"
            "${JL_BASE_DIR}/file_constants.jl"
            "${JL_BASE_DIR}/features_h.jl"
            "${JL_BASE_DIR}/build_h.jl"
            "${JL_BASE_DIR}/version_git.jl"
        DESTINATION 
            "share/julia/base")

set(BOOTSTRAP_DEBUG_LEVEL 2)
set(JULA_PRECOMPILE_DIR "${JULIA_PREFIX_DIR}/${CMAKE_INSTALL_LIBDIR}/julia")
file(MAKE_DIRECTORY "${JULA_PRECOMPILE_DIR}")
set(JULIA_CPU_TARGET "x86_64")

add_custom_target(
    corecompiler_ji ALL
    COMMAND julia_bin
        -C "${JULIA_CPU_TARGET}" --output-ji "${JULA_PRECOMPILE_DIR}/corecompiler.ji"
        --startup-file=no --warn-overwrite=yes -g${BOOTSTRAP_DEBUG_LEVEL} 
        --trace-compile=stderr 
        -O0 "${JL_BASE_DIR}/compiler/compiler.jl"
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JULA_PRECOMPILE_DIR}/corecompiler.ji"
    WORKING_DIRECTORY "${JL_BASE_DIR}"
    DEPENDS uv_constants file_constants pcre_h errno julia-codegen
)
install(FILES "${JULA_PRECOMPILE_DIR}/corecompiler.ji" DESTINATION "${CMAKE_INSTALL_LIBDIR}/julia")

add_custom_target(
    sys_ji ALL
    COMMAND echo "Starting sysimg.jl"
    COMMAND set JULIA_NUM_THREADS=1
    COMMAND julia_bin
        -C "${JULIA_CPU_TARGET}" 
        --output-ji "${JULA_PRECOMPILE_DIR}/sys.ji"
        ${JULIA_SYSIMG_BUILD_FLAGS}
        --startup-file=no --warn-overwrite=yes 
        -g${BOOTSTRAP_DEBUG_LEVEL} 
        --trace-compile=stderr
        -O0 
        --sysimage "${JULA_PRECOMPILE_DIR}/corecompiler.ji" sysimg.jl "${JL_BASE_DIR}/"
    COMMAND echo "Finished sysimg.jl"
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JULA_PRECOMPILE_DIR}/sys.ji"
    WORKING_DIRECTORY "${JL_BASE_DIR}"
    DEPENDS corecompiler_ji
)


install(FILES "${JULA_PRECOMPILE_DIR}/sys.ji" DESTINATION "${CMAKE_INSTALL_LIBDIR}/julia")

add_custom_target(
    sysimg_builder ALL
    COMMAND echo "Running generate_precompile.jl"
    COMMAND set JULIA_NUM_THREADS=1
    COMMAND julia_bin
        -C "${JULIA_CPU_TARGET}" 
        --output-ji "${JULA_PRECOMPILE_DIR}/sys-o.lib"
        ${JULIA_SYSIMG_BUILD_FLAGS}
        --startup-file=no 
        --warn-overwrite=yes 
        -g${BOOTSTRAP_DEBUG_LEVEL} 
        --trace-compile=stderr 
        -O3
        --sysimage "${JULA_PRECOMPILE_DIR}/sys.ji" 
        "${CMAKE_CURRENT_SOURCE_DIR}/../contrib/generate_precompile.jl"
    COMMAND echo "Finished generate_precompile.jl"
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JULA_PRECOMPILE_DIR}/sys-o.lib"
    WORKING_DIRECTORY "${JL_BASE_DIR}"
    DEPENDS sys_ji
)

separate_arguments(c_linker_flags NATIVE_COMMAND "${CMAKE_SHARED_LINKER_FLAGS}")
separate_arguments(c_linker_flags_${build_type} NATIVE_COMMAND "${CMAKE_SHARED_LINKER_FLAGS_${build_type}}")

string(REPLACE "<LIBRARY>" "" whole_archive "${CMAKE_LINK_LIBRARY_USING_WHOLE_ARCHIVE}")

add_custom_target(
    sys_shared ALL
    COMMAND ${CMAKE_LINKER}
        ${c_linker_flags} 
        ${c_linker_flags_${build_type}}
        /DLL
        "/out:${JULA_PRECOMPILE_DIR}/sys.dll"
        #"/pdb:${JULA_PRECOMPILE_DIR}/sys.pdb"
        "${CMAKE_LIBRARY_PATH_FLAG}${JULA_PRECOMPILE_DIR}"
        "${CMAKE_LIBRARY_PATH_FLAG}${CMAKE_LIBRARY_OUTPUT_DIRECTORY}" # Could also use $<TARGET_LINKER_FILE_DIR:tgt>
        "${whole_archive}${JULA_PRECOMPILE_DIR}/sys-o.lib"
        "${CMAKE_LINK_LIBRARY_FLAG}$<TARGET_LINKER_FILE:julia>"
        "${CMAKE_LINK_LIBRARY_FLAG}$<TARGET_LINKER_FILE:julia-internal>"
        #-g${BOOTSTRAP_DEBUG_LEVEL} 
        #--trace-compile=stderr 
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JULA_PRECOMPILE_DIR}/sys.dll"
    WORKING_DIRECTORY "${JL_BASE_DIR}"
    DEPENDS sysimg_builder julia julia-internal
)

install(FILES "${JULA_PRECOMPILE_DIR}/sys.dll" DESTINATION "${CMAKE_INSTALL_LIBDIR}/julia")
# Not even needed
#set(jl_compiler_srcs 
#        boot.jl docs/core.jl abstractarray.jl abstractdict.jl array.jl bitarray.jl 
#        bitset.jl bool.jl ctypes.jl error.jl essentials.jl expr.jl generator.jl 
#        int.jl indices.jl iterators.jl namedtuple.jl number.jl operators.jl 
#        options.jl pair.jl pointer.jl promotion.jl range.jl reflection.jl 
#        traits.jl refvalue.jl tuple.jl
#)

#JULIA_SYSIMG_BUILD_FLAGS
#RELBUILDROOT ?
# define sysimg_builder
# $$(build_private_libdir)/sys$1-o.a $$(build_private_libdir)/sys$1-bc.a : $$(build_private_libdir)/sys$1-%.a : $$(build_private_libdir)/sys.ji $$(JULIAHOME)/contrib/generate_precompile.jl
# 	@$$(call PRINT_JULIA, cd $$(JULIAHOME)/base && \
# 	if ! JULIA_BINDIR=$$(call cygpath_w,$(build_bindir)) WINEPATH="$$(call cygpath_w,$$(build_bindir));$$$$WINEPATH" \
# 	JULIA_NUM_THREADS=1 \
# 	$$(call spawn, $3) $2 -C "$$(JULIA_CPU_TARGET)" --trace-compile=stderr -g2 --output-$$* $$(call cygpath_w,$$@).tmp $$(JULIA_SYSIMG_BUILD_FLAGS) \
# 	--startup-file=no --warn-overwrite=yes --sysimage $$(call cygpath_w,$$<) $$(call cygpath_w,$$(JULIAHOME)/contrib/generate_precompile.jl) $(JULIA_PRECOMPILE); then \
# echo '*** This error is usually fixed by running `make clean`. If the error persists$$(COMMA) try `make cleanall`. ***'; \
# false; \
# 	fi )
# 	@mv $$@.tmp $$@
# .SECONDARY: $$(build_private_libdir)/sys$1-o.a $(build_private_libdir)/sys$1-bc.a # request Make to keep these files around
# endef
# $(eval $(call sysimg_builder,,-O3,$(JULIA_EXECUTABLE_release)))
# $(eval $(call sysimg_builder,-debug,-O0,$(JULIA_EXECUTABLE_debug)))

# $(build_private_libdir)/%.$(SHLIB_EXT): $(build_private_libdir)/%-o.a
# 	@$(call PRINT_LINK, $(CXX) $(LDFLAGS) -shared $(fPIC) -L$(build_private_libdir) -L$(build_libdir) -L$(build_shlibdir) -o $@ \
# 		$(WHOLE_ARCHIVE) $< $(NO_WHOLE_ARCHIVE) \
# 		$(if $(findstring -debug,$(notdir $@)),libjulia-internal-debug.dll.a libjulia-debug.dll.a,libjulia.dll.a libjulia-internal.dll.a) \
# 		$$([ $(OS) = WINNT ] && echo '' -lssp))
# 	@$(INSTALL_NAME_CMD)$(notdir $@) $@
# 	@$(DSYMUTIL) $@

#_bk;t=1684438236604 g++ -m64  -shared  -L/c/workdir/usr/lib/julia -L/c/workdir/usr/lib -L/c/workdir/usr/bin -o /c/workdir/usr/lib/julia/sys.dll -Wl,--whole-archive /c/workdir/usr/lib/julia/sys-o.a -Wl,--no-whole-archive -ljulia-internal -ljulia $([ WINNT = WINNT ] && echo '' -lssp)
#_bk;t=1684438244770 /c/workdir/usr/bin/julia.exe --startup-file=no --check-bounds=yes -e 'Base.compilecache(Base.identify_package("GMP_jll"))'
#_bk;t=1684438244770 /c/workdir/usr/bin/julia.exe --startup-file=no -e 'Base.compilecache(Base.identify_package("GMP_jll"))'