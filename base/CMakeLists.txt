


set(JL_DIR_SEP "/")
if(WIN32)
#    set(JL_DIR_SEP "\\\\")
endif()
#JULIAHOME
# JULIA_DEPOT_PATH is share/julia
set(JL_BASE_DIR "${JULIA_DEPOT_PATH}/base")
set(JL_TMP_DIR "${JULIA_DEPOT_PATH}/tmp")
file(MAKE_DIRECTORY "${JL_TMP_DIR}")
file(COPY "${CMAKE_CURRENT_SOURCE_DIR}/." DESTINATION  "${JL_BASE_DIR}/")

if(NOT Darwin)
    set(JL_DARWIN_FRAMEWORK false)
endif()
set(JL_USE_GPL_LIBS true)
set(JL_USE_BLAS64 false)
set(JL_LIBM "")
set(LLVM_SHARED_LIB_NAME "LLVM-C")
configure_file("${JL_BASE_DIR}/build_h.jl.in" "${JL_BASE_DIR}/build_h.jl" @ONLY)
configure_file("${JL_BASE_DIR}/version_git.jl.in" "${JL_BASE_DIR}/version_git.jl" @ONLY) # TODO

separate_arguments(cpp_flags NATIVE_COMMAND "${CMAKE_C_FLAGS}")
separate_arguments(cpp_flags_${build_type} NATIVE_COMMAND "${CMAKE_C_FLAGS_${build_type}}")

set(CALL_C_PREPROCESSOR "${CMAKE_C_COMPILER}" -EP -d1PP)

find_file(PCRE2_HEADER_FILE NAMES pcre2.h PATHS include)
add_custom_target(
    pcre_h ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "-I$<JOIN:$<TARGET_PROPERTY:julia,INCLUDE_DIRECTORIES>,;-I>"
        "-DPCRE2_CODE_UNIT_WIDTH=8"
        "${PCRE2_HEADER_FILE}"
        > "${JL_TMP_DIR}/pcre_h.jl.tmp"
    COMMAND "${CMAKE_COMMAND}"
        "-DINPUT=${JL_TMP_DIR}/pcre_h.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/pcre_h.jl"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/pcre_h_jl.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JL_BASE_DIR}/pcre_h.jl"
    DEPENDS "${PCRE2_HEADER_FILE}"
)

add_custom_target(
    uv_constants ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "-I$<JOIN:$<TARGET_PROPERTY:julia,INCLUDE_DIRECTORIES>,;-I>"
        "-I$<JOIN:$<TARGET_PROPERTY:jl::libuv,INTERFACE_INCLUDE_DIRECTORIES>,;-I>"
        "-DJULIA"
        "${CMAKE_CURRENT_SOURCE_DIR}/../src/uv_constants.h"
        > "${JL_TMP_DIR}/uv_constants.jl.tmp"
    COMMAND "${CMAKE_COMMAND}"
        "-DINPUT=${JL_TMP_DIR}/uv_constants.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/uv_constants.jl"
        "-DLINES=16"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/tail.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JL_BASE_DIR}/uv_constants.jl"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/../src/uv_constants.h"
)

file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/errno-jl.h" "#include <errno.h>")
add_custom_target(
    errno ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "${CMAKE_CURRENT_BINARY_DIR}/errno-jl.h"
        > "${JL_TMP_DIR}/errno_h.jl.tmp"
    COMMAND ${CMAKE_COMMAND} 
        "-DINPUT=${JL_TMP_DIR}/errno_h.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/errno_h.jl"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/errno_h_jl.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JL_BASE_DIR}/errno_h.jl"
)

add_custom_target(
    file_constants ALL
    COMMAND "${CALL_C_PREPROCESSOR}"
        ${cpp_flags} ${cpp_flags_${build_type}}
        "-D$<JOIN:$<TARGET_PROPERTY:julia,COMPILE_DEFINITIONS>,;-D>"
        "-DJULIA"
        "${CMAKE_CURRENT_SOURCE_DIR}/../src/file_constants.h"
        > "${JL_TMP_DIR}/file_constants.jl.tmp"
    COMMAND ${CMAKE_COMMAND} 
        "-DINPUT=${JL_TMP_DIR}/file_constants.jl.tmp"
        "-DOUTPUT=${JL_BASE_DIR}/file_constants.jl"
        -P "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/file_constants_jl.cmake" 
    COMMAND_EXPAND_LISTS VERBATIM
    BYPRODUCTS "${JL_BASE_DIR}/file_constants.jl"
)

set(JL_ARCHS X86 AArch32 AArch64)
set(final_contents "# This file is autogenerated by CMake")
foreach(arch IN LISTS JL_ARCHS)
    string(TOLOWER "${arch}" archl)
    set(feat_file "${CMAKE_CURRENT_SOURCE_DIR}/../src/features_${archl}.h")
    set(contents "")
    file(STRINGS "${feat_file}" contents REGEX "^JL_FEATURE_DEF") # also filters commented sections
    list(TRANSFORM contents 
         REPLACE 
            "^JL_FEATURE_DEF(_NAME)?\\\(([^,]+),[ \t]*([^,]+),.+" 
            "const JL_${arch}_\\2 = UInt32(\\3)"
        )
    list(JOIN contents "\n" contents_new)
    string(APPEND final_contents "\n# ${arch} features\n" "${contents_new}\n" )
endforeach()
file(WRITE "${JL_BASE_DIR}/features_h.jl" "${final_contents}\n")


install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/" DESTINATION "share/julia/base")
install(FILES 
            "${JL_BASE_DIR}/pcre_h.jl"
            "${JL_BASE_DIR}/uv_constants.jl"
            "${JL_BASE_DIR}/errno_h.jl"
            "${JL_BASE_DIR}/file_constants.jl"
            "${JL_BASE_DIR}/features_h.jl"
            "${JL_BASE_DIR}/build_h.jl"
            "${JL_BASE_DIR}/version_git.jl"
        DESTINATION 
            "share/julia/base")


set(JULA_PRECOMPILE_DIR "${JULIA_PREFIX_DIR}/${CMAKE_INSTALL_LIBDIR}/julia")
file(MAKE_DIRECTORY "${JULA_PRECOMPILE_DIR}")

set(JULIA_CPU_TARGET "x86_64")
set(BOOTSTRAP_DEBUG_LEVEL 2)

add_custom_target(
    corecompiler_ji ALL
    COMMAND echo "Compiling corecompiler.ji"
    COMMAND julia_bin
        -C "${JULIA_CPU_TARGET}" 
        --output-ji "${JULA_PRECOMPILE_DIR}/corecompiler.ji"
        --startup-file=no 
        #--warn-overwrite=yes 
        -g${BOOTSTRAP_DEBUG_LEVEL} 
        --trace-compile=stderr 
        -O0 
        "${JL_BASE_DIR}/compiler/compiler.jl"
    COMMAND echo "Finished corecompiler.ji"
    COMMAND_EXPAND_LISTS VERBATIM USES_TERMINAL
    BYPRODUCTS "${JULA_PRECOMPILE_DIR}/corecompiler.ji"
    WORKING_DIRECTORY "${JL_BASE_DIR}"
    DEPENDS uv_constants file_constants pcre_h errno julia-codegen
)
install(FILES "${JULA_PRECOMPILE_DIR}/corecompiler.ji" DESTINATION "${CMAKE_INSTALL_LIBDIR}/julia")

add_custom_target(
    sys_ji ALL
    COMMAND echo "Running sysimg.ji"
    COMMAND set JULIA_NUM_THREADS=1
    COMMAND julia_bin
        -C "${JULIA_CPU_TARGET}" 
        --output-ji "${JULA_PRECOMPILE_DIR}/sys.ji"
        ${JULIA_SYSIMG_BUILD_FLAGS}
        --startup-file=no
        #--warn-overwrite=yes
        -g${BOOTSTRAP_DEBUG_LEVEL}
        --trace-compile=stderr
        -O0
        --sysimage "${JULA_PRECOMPILE_DIR}/corecompiler.ji" sysimg.jl "${JL_BASE_DIR}/"
    COMMAND echo "Finished sysimg.jl"
    COMMAND_EXPAND_LISTS VERBATIM USES_TERMINAL
    BYPRODUCTS "${JULA_PRECOMPILE_DIR}/sys.ji"
    WORKING_DIRECTORY "${JL_BASE_DIR}"
    DEPENDS corecompiler_ji
)


install(FILES "${JULA_PRECOMPILE_DIR}/sys.ji" DESTINATION "${CMAKE_INSTALL_LIBDIR}/julia")

add_custom_target(
    sysimg_builder ALL
    COMMAND echo "Running generate_precompile.jl"
    COMMAND set JULIA_NUM_THREADS=1
    COMMAND julia_bin
        -C "${JULIA_CPU_TARGET}" 
        --output-o "${JULA_PRECOMPILE_DIR}/sys${CMAKE_C_OUTPUT_EXTENSION}"
        ${JULIA_SYSIMG_BUILD_FLAGS}
        --startup-file=no 
        --warn-overwrite=yes 
        -g${BOOTSTRAP_DEBUG_LEVEL} 
        --trace-compile=stderr 
        -O3
        --sysimage "${JULA_PRECOMPILE_DIR}/sys.ji" 
        "${CMAKE_CURRENT_SOURCE_DIR}/../contrib/generate_precompile.jl"
    COMMAND echo "Finished generate_precompile.jl"
    COMMAND_EXPAND_LISTS VERBATIM USES_TERMINAL
    BYPRODUCTS "${JULA_PRECOMPILE_DIR}/sys${CMAKE_C_OUTPUT_EXTENSION}"
    WORKING_DIRECTORY "${JL_BASE_DIR}"
    DEPENDS sys_ji
)

separate_arguments(c_linker_flags NATIVE_COMMAND "${CMAKE_SHARED_LINKER_FLAGS}")
separate_arguments(c_linker_flags_${build_type} NATIVE_COMMAND "${CMAKE_SHARED_LINKER_FLAGS_${build_type}}")

string(REPLACE "<LIBRARY>" "" whole_archive "${CMAKE_LINK_LIBRARY_USING_WHOLE_ARCHIVE}")

add_library(sys SHARED "${JULA_PRECOMPILE_DIR}/sys${CMAKE_C_OUTPUT_EXTENSION}")
add_dependencies(sys sysimg_builder)
target_link_libraries(sys PRIVATE julia julia-internal)
target_compile_options(sys PRIVATE -fuse-ld=lld-link -v)
target_link_options(sys PRIVATE 
                            /DEFAULTLIB:msvcrt.lib 
                            /DEFAULTLIB:oldnames.lib 
                            /DEFAULTLIB:msvcprt.lib 
                            /FAILIFMISMATCH:_ITERATOR_DEBUG_LEVEL=0
                            /FAILIFMISMATCH:RuntimeLibrary=MD_DynamicRelease
)
set_target_properties(sys PROPERTIES LINKER_LANGUAGE CXX)
# add_custom_target(
#     sys_shared ALL
#     COMMAND ${CMAKE_LINKER}
#         ${c_linker_flags} 
#         ${c_linker_flags_${build_type}}
#         /DLL
#         "/out:${JULA_PRECOMPILE_DIR}/sys.dll"
#         #"/pdb:${JULA_PRECOMPILE_DIR}/sys.pdb"
#         /DEFAULTLIB:msvcrt.lib
#         /DEFAULTLIB:oldnames.lib
#         "${CMAKE_LIBRARY_PATH_FLAG}${JULA_PRECOMPILE_DIR}"
#         "${CMAKE_LIBRARY_PATH_FLAG}${CMAKE_LIBRARY_OUTPUT_DIRECTORY}" # Could also use $<TARGET_LINKER_FILE_DIR:tgt>
#         "${whole_archive}${JULA_PRECOMPILE_DIR}/sys.obj"
#         "${CMAKE_LINK_LIBRARY_FLAG}$<TARGET_LINKER_FILE:julia>"
#         "${CMAKE_LINK_LIBRARY_FLAG}$<TARGET_LINKER_FILE:julia-internal>"
#         "${CMAKE_LINK_LIBRARY_FLAG}$<TARGET_LINKER_FILE:julia-codegen>"
#         #-g${BOOTSTRAP_DEBUG_LEVEL} 
#         #--trace-compile=stderr 
#     COMMAND_EXPAND_LISTS VERBATIM
#     BYPRODUCTS "${JULA_PRECOMPILE_DIR}/sys.dll"
#     WORKING_DIRECTORY "${JL_BASE_DIR}"
#     DEPENDS sysimg_builder julia julia-internal
# )

install(FILES "${JULA_PRECOMPILE_DIR}/sys.dll" DESTINATION "${CMAKE_INSTALL_LIBDIR}/julia")
