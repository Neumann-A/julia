const uv_handle_types = [:UV_ASYNC, :UV_CHECK, :UV_FS_EVENT, :UV_FS_POLL, :UV_HANDLE, :UV_IDLE, :UV_NAMED_PIPE, :UV_POLL, :UV_PREPARE, :UV_PROCESS, :UV_STREAM, :UV_TCP, :UV_TIMER, :UV_TTY, :UV_UDP, :UV_SIGNAL, :UV_FILE]
const uv_req_types = [:UV_REQ, :UV_CONNECT, :UV_WRITE, :UV_SHUTDOWN, :UV_UDP_SEND, :UV_FS, :UV_WORK, :UV_GETADDRINFO, :UV_GETNAMEINFO, :UV_RANDOM,]
const uv_err_vals = [((:UV_E2BIG, libuv),(-4093)), ((:UV_EACCES, libuv),(-4092)), ((:UV_EADDRINUSE, libuv),(-4091)), ((:UV_EADDRNOTAVAIL, libuv),(-4090)), ((:UV_EAFNOSUPPORT, libuv),(-4089)), ((:UV_EAGAIN, libuv),(-4088)), ((:UV_EAI_ADDRFAMILY, libuv),(-3000)), ((:UV_EAI_AGAIN, libuv),(-3001)), ((:UV_EAI_BADFLAGS, libuv),(-3002)), ((:UV_EAI_BADHINTS, libuv),(-3013)), ((:UV_EAI_CANCELED, libuv),(-3003)), ((:UV_EAI_FAIL, libuv),(-3004)), ((:UV_EAI_FAMILY, libuv),(-3005)), ((:UV_EAI_MEMORY, libuv),(-3006)), ((:UV_EAI_NODATA, libuv),(-3007)), ((:UV_EAI_NONAME, libuv),(-3008)), ((:UV_EAI_OVERFLOW, libuv),(-3009)), ((:UV_EAI_PROTOCOL, libuv),(-3014)), ((:UV_EAI_SERVICE, libuv),(-3010)), ((:UV_EAI_SOCKTYPE, libuv),(-3011)), ((:UV_EALREADY, libuv),(-4084)), ((:UV_EBADF, libuv),(-4083)), ((:UV_EBUSY, libuv),(-4082)), ((:UV_ECANCELED, libuv),(-4081)), ((:UV_ECHARSET, libuv),(-4080)), ((:UV_ECONNABORTED, libuv),(-4079)), ((:UV_ECONNREFUSED, libuv),(-4078)), ((:UV_ECONNRESET, libuv),(-4077)), ((:UV_EDESTADDRREQ, libuv),(-4076)), ((:UV_EEXIST, libuv),(-4075)), ((:UV_EFAULT, libuv),(-4074)), ((:UV_EFBIG, libuv),(-4036)), ((:UV_EHOSTUNREACH, libuv),(-4073)), ((:UV_EINTR, libuv),(-4072)), ((:UV_EINVAL, libuv),(-4071)), ((:UV_EIO, libuv),(-4070)), ((:UV_EISCONN, libuv),(-4069)), ((:UV_EISDIR, libuv),(-4068)), ((:UV_ELOOP, libuv),(-4067)), ((:UV_EMFILE, libuv),(-4066)), ((:UV_EMSGSIZE, libuv),(-4065)), ((:UV_ENAMETOOLONG, libuv),(-4064)), ((:UV_ENETDOWN, libuv),(-4063)), ((:UV_ENETUNREACH, libuv),(-4062)), ((:UV_ENFILE, libuv),(-4061)), ((:UV_ENOBUFS, libuv),(-4060)), ((:UV_ENODEV, libuv),(-4059)), ((:UV_ENOENT, libuv),(-4058)), ((:UV_ENOMEM, libuv),(-4057)), ((:UV_ENONET, libuv),(-4056)), ((:UV_ENOPROTOOPT, libuv),(-4035)), ((:UV_ENOSPC, libuv),(-4055)), ((:UV_ENOSYS, libuv),(-4054)), ((:UV_ENOTCONN, libuv),(-4053)), ((:UV_ENOTDIR, libuv),(-4052)), ((:UV_ENOTEMPTY, libuv),(-4051)), ((:UV_ENOTSOCK, libuv),(-4050)), ((:UV_ENOTSUP, libuv),(-4049)), ((:UV_EOVERFLOW, libuv),(-4026)), ((:UV_EPERM, libuv),(-4048)), ((:UV_EPIPE, libuv),(-4047)), ((:UV_EPROTO, libuv),(-4046)), ((:UV_EPROTONOSUPPORT, libuv),(-4045)), ((:UV_EPROTOTYPE, libuv),(-4044)), ((:UV_ERANGE, libuv),(-4034)), ((:UV_EROFS, libuv),(-4043)), ((:UV_ESHUTDOWN, libuv),(-4042)), ((:UV_ESPIPE, libuv),(-4041)), ((:UV_ESRCH, libuv),(-4040)), ((:UV_ETIMEDOUT, libuv),(-4039)), ((:UV_ETXTBSY, libuv),(-4038)), ((:UV_EXDEV, libuv),(-4037)), ((:UV_UNKNOWN, libuv),(-4094)), ((:UV_EOF, libuv),(-4095)), ((:UV_ENXIO, libuv),(-4033)), ((:UV_EMLINK, libuv),(-4032)), ((:UV_EHOSTDOWN, libuv),(-4031)), ((:UV_EREMOTEIO, libuv),(-4030)), ((:UV_ENOTTY, libuv),(-4029)), ((:UV_EFTYPE, libuv),(-4028)), ((:UV_EILSEQ, libuv),(-4027)), ((:UV_ESOCKTNOSUPPORT, libuv),(-4025)),]
let
    handles = [:UV_UNKNOWN_HANDLE, uv_handle_types..., :UV_HANDLE_TYPE_MAX]
    reqs = [:UV_UNKNOWN_REQ, uv_req_types..., :UV_REQ_TYPE_PRIVATE, :UV_REQ_TYPE_MAX]
    for i in 1:length(handles)
        @eval const $(handles[i]) = $(i - 1)
    end
    for i in 1:length(reqs)
        @eval const $(reqs[i]) = $(i - 1)
    end
    for (v, val) in uv_err_vals
        @eval const $v = $val
    end
end
