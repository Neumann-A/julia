add_subdirectory(support)
add_subdirectory(flisp)

# JL_BUILD_UNAME JL_BUILD_ARCH
# JL_SYSTEM_IMAGE_PATH=\"$(build_private_libdir_rel)/sys.$(SHLIB_EXT)\""
# JL_LIBJULIA_SONAME=\"$(LIBJULIA_PATH_REL).$(JL_MAJOR_SHLIB_EXT)\
# FLISP_EXECUTABLE
# $(build_shlibdir)/libccalltest.$(SHLIB_EXT): $(SRCDIR)/ccalltest.c
# $(build_shlibdir)/libllvmcalltest.$(SHLIB_EXT): $(SRCDIR)/llvmcalltest.cpp $(LLVM_CONFIG_ABSOLUTE) 

# $(BUILDDIR)/julia_flisp.boot: $(addprefix $(SRCDIR)/,jlfrontend.scm flisp/aliases.scm flisp/profile.scm \
#julia-parser.scm julia-syntax.scm match.scm utils.scm ast.scm macroexpand.scm mk_julia_flisp_boot.scm) \
#$(FLISP_EXECUTABLE_release)
#@$(call PRINT_FLISP, $(call spawn,$(FLISP_EXECUTABLE_release)) \
#$(call cygpath_w,$(SRCDIR)/mk_julia_flisp_boot.scm) $(call cygpath_w,$(dir $<)) $(notdir $<) $(call cygpath_w,$@))

#$(BUILDDIR)/julia_version.h: $(JULIAHOME)/VERSION
#@echo "// This is an autogenerated header file" > $@.$(JULIA_BUILD_MODE).tmp
#@echo "#ifndef JL_VERSION_H" >> $@.$(JULIA_BUILD_MODE).tmp
#@echo "#define JL_VERSION_H" >> $@.$(JULIA_BUILD_MODE).tmp
#@echo "#define JULIA_VERSION_STRING" \"$(JULIA_VERSION)\" >> $@.$(JULIA_BUILD_MODE).tmp
#@echo $(JULIA_VERSION) | awk 'BEGIN {FS="[.,+-]"} \
#{print "#define JULIA_VERSION_MAJOR " $$1 "\n" \
#"#define JULIA_VERSION_MINOR " $$2 "\n" \
#"#define JULIA_VERSION_PATCH " $$3 ; \
#if (NF<4) print "#define JULIA_VERSION_IS_RELEASE 1" ; else print  "#define JULIA_VERSION_IS_RELEASE 0"}' >> $@.$(JULIA_BUILD_MODE).tmp
#@echo "#endif" >> $@.$(JULIA_BUILD_MODE).tmp
#mv $@.$(JULIA_BUILD_MODE).tmp $@

#$(build_shlibdir)/lib%Plugin.$(SHLIB_EXT): $(SRCDIR)/clangsa/%.cpp $(LLVM_CONFIG_ABSOLUTE)
#	@$(call PRINT_CC, $(CXX) -g $(fPIC) -shared -o $@ -DCLANG_PLUGIN -I$(build_includedir) -L$(build_libdir) \
#		$(LLVM_CXXFLAGS) $(CLANG_LDFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) $(CXXLDFLAGS) $<)

set(jl_internal
        "jltypes gf typemap smallintset ast builtins module interpreter symbol \
        dlload sys init task array staticdata toplevel jl_uv datatype \
        simplevector runtime_intrinsics precompile jloptions \
        threading partr stackwalk gc gc-debug gc-pages gc-stacks gc-alloc-profiler method \
        jlapi signal-handling safepoint timing subtype rtutils gc-heap-snapshot \
        crc32c APInt-C processor ircode opaque_closure codegen-stubs coverage runtime_ccall"
   )
file(GLOB jl_internal_proc_srcs "processor_*.cpp")
file(GLOB jl_internal_signals_srcs "signals-*.c")

if(WIN32)
    list(APPEND jl_internal win32_ucontext)
endif()
set(jl_internal_srcs "")
foreach(file IN LISTS jl_internal) # TODO better directly set the names
    foreach(suffix IN ITEMS c cpp h hpp)
        if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.${suffix}")
            list(APPEND jl_internal_srcs "${file}.${suffix}")
            break()
        endif()
    endforeach()
endforeach()

add_library(julia-internal SHARED ${jl_internal_srcs} ${jl_internal_proc_srcs} ${jl_internal_signals_srcs})
add_library(jl::julia-internal ALIAS julia-internal)
target_link_libraries(julia-internal PRIVATE jl::julia jl::support jl::libuv)
target_compile_definitions(julia-internal PRIVATE "JL_LIBRARY_EXPORTS_INTERNAL")
target_include_directories(julia-internal PRIVATE "support")

set(jl_codegen
        "codegen jitlayers aotcompile debuginfo disasm llvm-simdloop llvm-muladd \
        llvm-final-gc-lowering llvm-pass-helpers llvm-late-gc-lowering llvm-ptls \
        llvm-lower-handlers llvm-gc-invariant-verifier llvm-propagate-addrspaces \
        llvm-multiversioning llvm-alloc-opt llvm-alloc-helpers cgmemmgr llvm-remove-addrspaces \
        llvm-remove-ni llvm-julia-licm llvm-demote-float16 llvm-cpufeatures pipeline"
   )
file(GLOB jl_codegen_abi_srcs "abi-*.c")  
set(jl_codegen_srcs "")
foreach(file IN LISTS jl_internal)  # TODO better directly set the names
    foreach(suffix IN ITEMS c cpp h hpp)
        if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.${suffix}")
            list(APPEND jl_codegen_srcs "${file}.${suffix}")
            break()
        endif()
    endforeach()
endforeach()
add_library(julia-codegen SHARED ${jl_codegen_srcs} ${jl_codegen_abi_srcs})
add_library(jl::julia-codegen ALIAS julia-codegen)
target_link_libraries(julia-codegen PRIVATE jl::julia-internal jl::julia jl::llvm)
target_compile_definitions(julia-codegen PRIVATE "JL_LIBRARY_EXPORTS_CODEGEN")
